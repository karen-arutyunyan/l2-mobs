import axios from 'axios';
import * as cheerio from 'cheerio';
import fs from 'fs';
import path from 'path';

const BASE_URL = 'https://wiki1.mw2.wiki/item/57-adena/live';
const QUERY_PARAMS = {
  sortField: 'count_up_to',
  sortType: 4
};

/**
 * –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥—Ä–æ–ø–æ–º –∞–¥–µ–Ω—ã
 * @param {number} pageNum - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @returns {Promise<Array>} –º–∞—Å—Å–∏–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤
 */
async function parseAdenaDrop(pageNum) {
  try {
    console.log(`–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNum}...`);
    
    const response = await axios.get(BASE_URL, {
      params: {
        ...QUERY_PARAMS,
        dropPage: pageNum
      }
    });

    const $ = cheerio.load(response.data);
    const mobs = [];

    // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã (–∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–∞–Ω–µ –¥—Ä–æ–ø–∞)
    $('#pjax_drop table.table tbody tr').each((index, element) => {
      const $row = $(element);
      
      // NPC –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      const $npcLink = $row.find('a.item-name');
      const npcHref = $npcLink.attr('href'); // /npc/20537-elder-red-keltir/live
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–Ω—Å—Ç—Ä–∞ –∏ —É—Ä–æ–≤–µ–Ω—å –æ—Ç–¥–µ–ª—å–Ω–æ
      const $contentSpan = $npcLink.find('.item-name__content');
      const $levelSpan = $contentSpan.find('.item-name__additional');
      const level = $levelSpan.text().trim(); // "–£—Ä. 3"
      
      // –£–¥–∞–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
      const fullText = $contentSpan.html();
      const npcName = fullText.split('<span class="item-name__additional">')[0].trim();
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "22 - 38")
      const $amountTd = $row.find('td.text-center');
      const amountText = $amountTd.text().trim();
      const [minAmount, maxAmount] = amountText.split('-').map(v => parseInt(v.trim()));
      
      // –®–∞–Ω—Å –¥—Ä–æ–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "70%")
      const $chanceTd = $row.find('td.text-end');
      const chanceText = $chanceTd.text().trim(); // "70%"
      const chance = parseFloat(chanceText);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º NPC ID –∏–∑ —Å—Å—ã–ª–∫–∏
      const npcIdMatch = npcHref.match(/\/npc\/(\d+)-/);
      const npcId = npcIdMatch ? parseInt(npcIdMatch[1]) : null;
      
      mobs.push({
        id: npcId,
        name: npcName,
        level: level,
        href: npcHref,
        minAdena: minAmount,
        maxAdena: maxAmount,
        chance: chance,
        avgAdena: Math.round((minAmount + maxAmount) / 2)
      });
    });

    console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω—Å—Ç—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}: ${mobs.length}`);
    return mobs;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}:`, error.message);
    return [];
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 * @returns {Promise<number>} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
async function getMaxPages() {
  try {
    const response = await axios.get(BASE_URL, {
      params: QUERY_PARAMS
    });
    
    const $ = cheerio.load(response.data);
    
    // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–≤–Ω—É—Ç—Ä–∏ pjax_drop)
    const pageLinks = $('#pjax_drop ul.pagination li a[data-page]');
    let maxPage = 1;
    
    pageLinks.each((index, element) => {
      const pageNum = parseInt($(element).attr('data-page')) + 1;
      maxPage = Math.max(maxPage, pageNum);
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageLinks.length}`);
    console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${maxPage}`);
    
    return maxPage;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:', error.message);
    return 1;
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ (–ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
 * @returns {Promise<number>} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
async function findMaxPagesAuto() {
  console.log('üîç –û–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...\n');
  
  let pageNum = 1;
  let lastHadMobs = true;
  
  while (lastHadMobs) {
    try {
      console.log(`  –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNum}...`);
      
      const response = await axios.get(BASE_URL, {
        params: {
          ...QUERY_PARAMS,
          dropPage: pageNum
        },
        timeout: 10000
      });

      const $ = cheerio.load(response.data);
      const mobRows = $('#pjax_drop table.table tbody tr');
      const mobCount = mobRows.length;
      
      if (mobCount === 0) {
        console.log(`  ‚îî‚îÄ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum} –ø—É—Å—Ç–∞. –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.\n`);
        lastHadMobs = false;
        return pageNum - 1;
      }
      
      console.log(`  ‚îî‚îÄ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}: ${mobCount} –º–æ–Ω—Å—Ç—Ä–æ–≤`);
      pageNum++;
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 300));
      
    } catch (error) {
      console.log(`  ‚îî‚îÄ –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNum}: ${error.message}`);
      lastHadMobs = false;
      return pageNum - 1;
    }
  }
  
  return pageNum - 1;
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
 * @param {number} maxPages - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∏–ª–∏ null –¥–ª—è –≤—Å–µ—Ö)
 * @returns {Promise<Array>} –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤
 */
async function parseAllPages(maxPages = null) {
  const totalPages = maxPages || await getMaxPages();
  const allMobs = [];
  
  for (let i = 1; i <= totalPages; i++) {
    const mobs = await parseAdenaDrop(i);
    allMobs.push(...mobs);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  return allMobs;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
 */
async function saveResults(mobs, filename = 'mobs_adena.json') {
  const outputDir = './data';
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  const filepath = path.join(outputDir, filename);
  fs.writeFileSync(filepath, JSON.stringify(mobs, null, 2));
  console.log(`\n‚úì –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filepath}`);
  console.log(`–í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${mobs.length}`);
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üéÆ Lineage 2 - –ü–∞—Ä—Å–µ—Ä –¥—Ä–æ–ø–∞ –ê–¥–µ–Ω—ã');
  console.log('=====================================\n');
  
  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∞
  // –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const TEST_MODE = false;
  const TEST_PAGES = 2;
  
  let totalPages;
  
  if (TEST_MODE) {
    totalPages = TEST_PAGES;
    console.log(`‚öôÔ∏è  –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∑–∞–≥—Ä—É–∂—É ${TEST_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü\n`);
  } else {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    totalPages = await findMaxPagesAuto();
  }
  
  console.log('');
  const mobs = await parseAllPages(totalPages);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–¥–µ–Ω—ã (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
  mobs.sort((a, b) => b.avgAdena - a.avgAdena);
  
  // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤: ${mobs.length}`);
  
  if (mobs.length > 0) {
    const minAdena = Math.min(...mobs.map(m => m.minAdena));
    const maxAdena = Math.max(...mobs.map(m => m.maxAdena));
    console.log(`–î–∏–∞–ø–∞–∑–æ–Ω –∞–¥–µ–Ω—ã: ${minAdena} - ${maxAdena}`);
    
    // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    const levels = mobs.map(m => {
      const levelMatch = m.level.match(/\d+/);
      return levelMatch ? parseInt(levelMatch[0]) : 0;
    });
    const avgLevel = Math.round(levels.reduce((a, b) => a + b, 0) / levels.length);
    console.log(`–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: ${avgLevel}`);
    
    console.log('\n–¢–æ–ø 10 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–¥–µ–Ω—ã:');
    mobs.slice(0, 10).forEach((mob, i) => {
      console.log(`${i + 1}. ${mob.name} (Lv. ${mob.level}) - ${mob.minAdena}-${mob.maxAdena} –∞–¥–µ–Ω—ã (${mob.chance}%)`);
    });
  }
  
  await saveResults(mobs);
}

main().catch(console.error);