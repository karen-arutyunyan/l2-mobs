import * as cheerio from 'cheerio';
import fs from 'fs';
import path from 'path';

/**
 * –ü–∞—Ä—Å–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π HTML —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
function parseLocalNpcStats(htmlPath) {
  try {
    console.log(`–ó–∞–≥—Ä—É–∂–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${htmlPath}`);

    const html = fs.readFileSync(htmlPath, 'utf-8');
    const $ = cheerio.load(html);
    const stats = {};

    // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (#result-stats)
    const $statsTable = $('#result-stats table');
    
    console.log(`‚úì –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    $statsTable.find('tr').each((rowIndex, row) => {
      const $cells = $(row).find('td');
      
      // –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 2 –∏–ª–∏ 4 —è—á–µ–π–∫–∏ (–ø–∞—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä-–∑–Ω–∞—á–µ–Ω–∏–µ)
      // –§–æ—Ä–º–∞—Ç: Label1, Value1, Label2, Value2
      for (let i = 0; i < $cells.length; i += 2) {
        const label = $($cells[i]).text().trim();
        const value = $($cells[i + 1]).text().trim();
        
        if (label && value) {
          stats[label] = value;
          console.log(`  ${label}: ${value}`);
        }
      }
    });

    // –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç HTML)
    const $defAttrTd = $statsTable.find('td').filter((idx, el) => 
      $(el).find('span[style*="color"]').length > 0
    );
    
    if ($defAttrTd.length > 0) {
      const attributes = {};
      $defAttrTd.find('p').each((idx, el) => {
        const text = $(el).text().trim();
        if (text) {
          const [attrName, attrValue] = text.split(',');
          if (attrName && attrValue) {
            attributes[attrName.trim()] = parseInt(attrValue.trim());
          }
        }
      });
      if (Object.keys(attributes).length > 0) {
        stats['Defence Attributes'] = attributes;
        console.log(`  Defence Attributes: ${JSON.stringify(attributes)}`);
      }
    }

    return stats;

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:`, error.message);
    return {};
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
function normalizeStats(stats) {
  const normalized = {};

  for (const [key, value] of Object.entries(stats)) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
    if (typeof value === 'object' && value !== null) {
      normalized[key] = value;
      continue;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
    const match = value.match(/(\d+)/);
    const num = match ? parseInt(match[1]) : NaN;
    normalized[key] = !isNaN(num) ? num : value;
  }

  return normalized;
}

async function main() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞\n');

  const htmlPath = './data/sample_elder_red_keltir.html';

  if (!fs.existsSync(htmlPath)) {
    console.error(`‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${htmlPath}`);
    process.exit(1);
  }

  console.log('üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTML —Ñ–∞–π–ª–∞...\n');
  const stats = parseLocalNpcStats(htmlPath);

  console.log('\nüìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  const normalized = normalizeStats(stats);
  console.log(JSON.stringify(normalized, null, 2));

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const outputPath = './data/test_local_parse.json';
  fs.writeFileSync(outputPath, JSON.stringify(normalized, null, 2));
  console.log(`\n‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`);
}

main().catch(console.error);