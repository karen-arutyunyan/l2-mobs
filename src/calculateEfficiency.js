import fs from 'fs';
import path from 'path';

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ (HP –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∞–¥–µ–Ω—ã)
 * @param {Object} mob - –æ–±—ä–µ–∫—Ç –º–æ–Ω—Å—Ç—Ä–∞ —Å –ø–æ–ª—è–º–∏ hp, avgAdena
 * @returns {number} —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (HP/Adena) –∏–ª–∏ null –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
 */
function calculateEfficiency(mob) {
  if (!mob.hp || !mob.avgAdena) {
    return null;
  }

  return mob.hp / mob.avgAdena;
}

/**
 * –û–±–æ–≥–∞—â–∞–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} mobs - –º–∞—Å—Å–∏–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤
 * @returns {Array} –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 */
function enrichWithEfficiency(mobs) {
  return mobs.map(mob => {
    const efficiency = calculateEfficiency(mob);
    return {
      ...mob,
      efficiency: efficiency,
      hpPerAdena: efficiency // alias –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    };
  });
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} mobs - –º–∞—Å—Å–∏–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤
 * @param {boolean} ascending - –µ—Å–ª–∏ true, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
 * @returns {Array} –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 */
function sortByEfficiency(mobs, ascending = false) {
  return [...mobs].sort((a, b) => {
    const effA = a.efficiency ?? 0;
    const effB = b.efficiency ?? 0;
    return ascending ? effA - effB : effB - effA;
  });
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * @param {Array} mobs - –º–∞—Å—Å–∏–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤
 * @returns {string} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
 */
function generateEfficiencyReport(mobs) {
  const mobsWithEff = enrichWithEfficiency(mobs);
  const sorted = sortByEfficiency(mobsWithEff, false);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ HP
  const withStats = sorted.filter(m => m.efficiency !== null);
  const withoutStats = sorted.filter(m => m.efficiency === null);

  let report = 'üìä –û–¢–ß–ï–¢ –û–ë –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –ú–û–ù–°–¢–†–û–í\n';
  report += '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n';

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  report += 'üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n';
  report += `  –í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${mobs.length}\n`;
  report += `  –° –¥–∞–Ω–Ω—ã–º–∏ –ø–æ HP: ${withStats.length}\n`;
  report += `  –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ HP: ${withoutStats.length}\n\n`;

  if (withStats.length > 0) {
    const efficiencies = withStats.map(m => m.efficiency);
    const minEff = Math.min(...efficiencies);
    const maxEff = Math.max(...efficiencies);
    const avgEff = efficiencies.reduce((a, b) => a + b, 0) / efficiencies.length;

    report += 'üí™ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ (HP/Adena):\n';
    report += `  –ú–∏–Ω–∏–º—É–º: ${minEff.toFixed(2)}\n`;
    report += `  –ú–∞–∫—Å–∏–º—É–º: ${maxEff.toFixed(2)}\n`;
    report += `  –°—Ä–µ–¥–Ω–µ–µ: ${avgEff.toFixed(2)}\n\n`;

    report += '‚≠ê –¢–û–ü 15 –≠–§–§–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–°–¢–†–û–í:\n';
    report += '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n';
    
    withStats.slice(0, 15).forEach((mob, idx) => {
      report += `${String(idx + 1).padStart(2, ' ')}. ${mob.name.padEnd(25, ' ')} `;
      report += `Lv.${String(mob.level).padStart(2, ' ')} | `;
      report += `HP: ${String(mob.hp).padStart(4, ' ')} | `;
      report += `Adena: ${String(mob.avgAdena).padStart(3, ' ')} | `;
      report += `Eff: ${mob.efficiency.toFixed(2)}\n`;
    });

    report += '\nüîª –¢–û–ü 15 –ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–°–¢–†–û–í:\n';
    report += '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n';
    
    const reversed = [...withStats].reverse();
    reversed.slice(0, 15).forEach((mob, idx) => {
      report += `${String(idx + 1).padStart(2, ' ')}. ${mob.name.padEnd(25, ' ')} `;
      report += `Lv.${String(mob.level).padStart(2, ' ')} | `;
      report += `HP: ${String(mob.hp).padStart(4, ' ')} | `;
      report += `Adena: ${String(mob.avgAdena).padStart(3, ' ')} | `;
      report += `Eff: ${mob.efficiency.toFixed(2)}\n`;
    });
  }

  report += '\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n';

  if (withoutStats.length > 0) {
    report += `\n‚ö†Ô∏è  –ú–û–ù–°–¢–†–´ –ë–ï–ó –î–ê–ù–ù–´–• –ü–û HP (${withoutStats.length}):\n`;
    withoutStats.slice(0, 10).forEach((mob, idx) => {
      report += `  ${idx + 1}. ${mob.name} - ID: ${mob.id}\n`;
    });
    if (withoutStats.length > 10) {
      report += `  ... –∏ –µ—â–µ ${withoutStats.length - 10} –º–æ–Ω—Å—Ç—Ä–æ–≤\n`;
    }
  }

  return report;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ JSON
 * @param {Array} mobs - –º–∞—Å—Å–∏–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤
 * @param {string} filename - –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
function saveEfficiencyResults(mobs, filename = 'mobs_with_efficiency.json') {
  const enriched = enrichWithEfficiency(mobs);
  const sorted = sortByEfficiency(enriched);

  const outputDir = './data';
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const filepath = path.join(outputDir, filename);
  fs.writeFileSync(filepath, JSON.stringify(sorted, null, 2));
  console.log(`‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filepath}`);
}

export { calculateEfficiency, enrichWithEfficiency, sortByEfficiency, generateEfficiencyReport, saveEfficiencyResults };