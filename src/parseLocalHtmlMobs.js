import * as cheerio from 'cheerio';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const DATA_DIR = path.join(__dirname, '../data');
const MOBS_LIST_FILE = path.join(DATA_DIR, 'mobs_adena.json');
const OUTPUT_FILE = path.join(DATA_DIR, 'mobs_full_stats.json');

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[36m',
  magenta: '\x1b[35m'
};

/**
 * –ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ HTML
 */
function parseStats(html) {
  const $ = cheerio.load(html);
  const stats = {};

  const $statsTable = $('#result-stats table');
  if ($statsTable.length === 0) {
    return null;
  }

  $statsTable.find('tr').each((rowIndex, row) => {
    const $cells = $(row).find('td');
    
    for (let i = 0; i < $cells.length; i += 2) {
      const label = $($cells[i]).text().trim();
      const value = $($cells[i + 1]).text().trim();
      
      if (label && value && !stats[label]) {
        const numMatch = value.match(/(\d+)/);
        const numValue = numMatch ? parseInt(numMatch[1]) : value;
        stats[label] = numValue;
      }
    }
  });

  // –ê—Ç—Ä–∏–±—É—Ç—ã –∑–∞—â–∏—Ç—ã
  const $defAttrCell = $statsTable.find('td').filter((idx, el) => 
    $(el).find('span[style*="color"]').length > 0
  );
  
  if ($defAttrCell.length > 0) {
    const attributes = {};
    $defAttrCell.find('p').each((idx, el) => {
      const text = $(el).text().trim();
      if (text) {
        const parts = text.split(',').map(p => p.trim());
        if (parts.length >= 2) {
          const attrName = parts[0];
          const attrValue = parseInt(parts[1]);
          if (!isNaN(attrValue)) {
            attributes[attrName] = attrValue;
          }
        }
      }
    });
    if (Object.keys(attributes).length > 0) {
      stats['Defence Attributes'] = attributes;
    }
  }

  return Object.keys(stats).length > 0 ? stats : null;
}

/**
 * –ü–∞—Ä—Å–∏—Ç –¥—Ä–æ–ø—ã
 */
function parseDrops(html) {
  const $ = cheerio.load(html);
  const drops = [];

  const $dropTable = $('#pjax_npc_drop table, [data-pjax="npc_drop"] table');
  
  if ($dropTable.length === 0) {
    return drops;
  }

  $dropTable.find('tbody tr').each((rowIndex, row) => {
    const $row = $(row);
    
    if ($row.find('td[colspan]').length > 0) {
      return;
    }

    const $cells = $row.find('td');
    if ($cells.length < 3) return;

    const $itemLink = $row.find('a.item-name, a[href*="item"]');
    const itemName = $itemLink.text().trim() || $($cells[0]).text().trim();
    const amount = $($cells[1]).text().trim();
    const chance = $($cells[2]).text().trim();

    if (itemName && amount && chance) {
      drops.push({
        name: itemName,
        amount: amount,
        chance: chance
      });
    }
  });

  return drops;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
function normalizeStats(stats) {
  const fieldMapping = {
    'Level': 'level',
    'HP': 'hp',
    'MP': 'mp',
    'P.Atk.': 'pAtk',
    'M.Atk.': 'mAtk',
    'P.Def.': 'pDef',
    'M.Def.': 'mDef',
    'Accuracy': 'accuracy',
    'Evasion': 'evasion',
    'EXP': 'exp',
    'SP': 'sp',
    'Respawn Time': 'respawnTime',
    'Attack Attribute': 'attackAttribute',
    'Defence Attribute': 'defenceAttribute',
    'Defence Attributes': 'defenceAttributes'
  };

  const normalized = {};

  for (const [key, value] of Object.entries(stats)) {
    const normalizedKey = fieldMapping[key] || key;

    if (typeof value === 'object' && value !== null) {
      normalized[normalizedKey] = value;
    } else {
      normalized[normalizedKey] = value;
    }
  }

  return normalized;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}`);
  console.log(`${colors.magenta}  üìÅ –ü–ê–†–°–ò–ù–ì –õ–û–ö–ê–õ–¨–ù–´–• HTML –§–ê–ô–õ–û–í${colors.reset}`);
  console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}\n`);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤
  if (!fs.existsSync(MOBS_LIST_FILE)) {
    console.error(`${colors.red}‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${MOBS_LIST_FILE}${colors.reset}`);
    process.exit(1);
  }

  const allMobs = JSON.parse(fs.readFileSync(MOBS_LIST_FILE, 'utf-8'));
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã –≤ data –ø–∞–ø–∫–µ
  const htmlFiles = fs.readdirSync(DATA_DIR)
    .filter(file => file.match(/^npc_\d+\.html$/))
    .sort();

  console.log(`${colors.blue}üìÇ –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}${colors.reset}`);
  console.log(`${colors.blue}üìä –í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –ë–î: ${allMobs.length}${colors.reset}\n`);

  if (htmlFiles.length === 0) {
    console.log(`${colors.yellow}‚ö† –ù–µ—Ç HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞${colors.reset}`);
    console.log(`${colors.blue}–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:${colors.reset}`);
    console.log(`  1. –û—Ç–∫—Ä–æ–π—Ç–µ https://wiki1.mw2.wiki/en/npc/`);
    console.log(`  2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–Ω—Å—Ç—Ä–∞`);
    console.log(`  3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ HTML (Ctrl+S)`);
    console.log(`  4. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –≤: npc_<ID>.html`);
    console.log(`  5. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤: ${DATA_DIR}\\`);
    console.log(`  6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞\n`);
    process.exit(0);
  }

  const results = [];
  let successCount = 0;
  let failCount = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π HTML —Ñ–∞–π–ª
  htmlFiles.forEach((file, index) => {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const match = file.match(/npc_(\d+)\.html/);
      if (!match) {
        console.log(`${colors.yellow}[${index + 1}/${htmlFiles.length}] ‚ö† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${file}${colors.reset}`);
        return;
      }

      const npcId = parseInt(match[1]);

      // –ß–∏—Ç–∞–µ–º HTML
      const htmlPath = path.join(DATA_DIR, file);
      const html = fs.readFileSync(htmlPath, 'utf-8');

      // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥—Ä–æ–ø—ã
      const stats = parseStats(html);
      const drops = parseDrops(html);

      if (!stats) {
        console.log(`${colors.yellow}[${index + 1}/${htmlFiles.length}] ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: ${file}${colors.reset}`);
        failCount++;
        return;
      }

      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ –ë–î
      const mobFromDb = allMobs.find(m => m.id === npcId);
      if (!mobFromDb) {
        console.log(`${colors.yellow}[${index + 1}/${htmlFiles.length}] ‚ö† –ú–æ–Ω—Å—Ç—Ä ${npcId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î${colors.reset}`);
        failCount++;
        return;
      }

      const normalized = normalizeStats(stats);

      console.log(`${colors.green}[${index + 1}/${htmlFiles.length}] ‚úì ${mobFromDb.name} (Lv.${normalized.level}, HP:${normalized.hp}, EXP:${normalized.exp})${colors.reset}`);

      results.push({
        id: npcId,
        name: mobFromDb.name,
        href: mobFromDb.href,
        level: normalized.level,
        stats: normalized,
        drops: drops,
        adena: {
          min: mobFromDb.minAdena,
          max: mobFromDb.maxAdena,
          avg: mobFromDb.avgAdena,
          chance: mobFromDb.chance
        },
        fetchedAt: new Date().toISOString()
      });

      successCount++;

    } catch (error) {
      console.log(`${colors.red}[${index + 1}/${htmlFiles.length}] ‚úó –û–®–ò–ë–ö–ê –≤ ${file}: ${error.message}${colors.reset}`);
      failCount++;
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (results.length > 0) {
    fs.writeFileSync(OUTPUT_FILE, JSON.stringify(results, null, 2));
    console.log(`\n${colors.green}‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${OUTPUT_FILE}${colors.reset}`);
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log(`\n${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}`);
  console.log(`${colors.green}‚úì –£—Å–ø–µ—à–Ω–æ: ${successCount}${colors.reset}`);
  console.log(`${colors.red}‚úó –û—à–∏–±–æ–∫: ${failCount}${colors.reset}`);
  console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}\n`);

  if (results.length > 0) {
    const levels = results.map(r => r.stats.level);
    const exps = results.map(r => r.stats.exp);

    console.log(`${colors.magenta}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:${colors.reset}`);
    console.log(`  ‚Ä¢ –£—Ä–æ–≤–Ω–∏: ${Math.min(...levels)} - ${Math.max(...levels)}`);
    console.log(`  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π EXP: ${(exps.reduce((a,b) => a+b, 0) / exps.length).toFixed(0)}`);
    console.log(`  ‚Ä¢ –ú–æ–Ω—Å—Ç—Ä–æ–≤ —Å –¥—Ä–æ–ø–∞–º–∏: ${results.filter(r => r.drops.length > 0).length}/${results.length}\n`);

    console.log(`${colors.blue}–ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤:${colors.reset}`);
    results.slice(0, 3).forEach(mob => {
      console.log(`  ‚Ä¢ ${mob.name} (ID:${mob.id}, Lv.${mob.level})`);
    });
  }

  console.log(`\n${colors.blue}üí° –°–æ–≤–µ—Ç: –°–∫–∞—á–∏–≤–∞–π—Ç–µ –≤—Å–µ –±–æ–ª—å—à–µ HTML —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞!${colors.reset}\n`);
}

main();