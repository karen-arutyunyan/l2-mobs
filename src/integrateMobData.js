import fs from 'fs';
import path from 'path';
import { parseMobStats, normalizeStats } from './parseMobStats.js';
import { enrichWithEfficiency, sortByEfficiency, generateEfficiencyReport, saveEfficiencyResults } from './calculateEfficiency.js';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ mobs_adena.json –∏ HTML —Ñ–∞–π–ª–æ–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (HP/Adena) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
 */
async function integrateMobData() {
  console.log('üéÆ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤\n');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥–µ–Ω–µ
  const adenajsonPath = './data/mobs_adena.json';
  if (!fs.existsSync(adenajsonPath)) {
    console.error(`‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${adenajsonPath}`);
    console.log('  –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run parse-adena');
    process.exit(1);
  }

  const mobs = JSON.parse(fs.readFileSync(adenajsonPath, 'utf-8'));
  console.log(`‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mobs.length} –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–∑ ${adenajsonPath}\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ HTML —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã
  const dataDir = './data';
  const htmlFiles = fs.readdirSync(dataDir)
    .filter(f => f.startsWith('npc_') && f.endsWith('.html'));

  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${htmlFiles.length}\n`);

  // –û–±–æ–≥–∞—â–∞–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ HTML —Ñ–∞–π–ª–æ–≤
  let enrichedCount = 0;

  for (let i = 0; i < mobs.length; i++) {
    const mob = mobs[i];
    
    // –ò—â–µ–º HTML —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
    const htmlFile = htmlFiles.find(f => f.includes(mob.id.toString()));

    if (htmlFile) {
      const htmlPath = path.join(dataDir, htmlFile);
      
      try {
        console.log(`[${i + 1}/${mobs.length}] –ó–∞–≥—Ä—É–∂–∞—é ${mob.name}...`);
        
        const stats = parseMobStats(htmlPath, true);
        if (stats) {
          const normalized = normalizeStats(stats);
          
          mob.hp = normalized['HP'];
          mob.mp = normalized['MP'];
          mob.pAtk = normalized['P.Atk.'];
          mob.mAtk = normalized['M.Atk.'];
          mob.pDef = normalized['P.Def.'];
          mob.mDef = normalized['M.Def.'];
          mob.accuracy = normalized['Accuracy'];
          mob.evasion = normalized['Evasion'];
          mob.exp = normalized['EXP'];
          mob.sp = normalized['SP'];
          mob.defenceAttributes = normalized['Defence Attributes'];
          mob.allStats = normalized;

          enrichedCount++;
          console.log(`  ‚úì HP: ${mob.hp}, EXP: ${mob.exp}`);
        }
      } catch (error) {
        console.error(`  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: ${error.message}`);
      }
    }
  }

  console.log(`\n‚úì –û–±–æ–≥–∞—â–µ–Ω–æ –¥–∞–Ω–Ω—ã–º–∏ ${enrichedCount} –º–æ–Ω—Å—Ç—Ä–æ–≤\n`);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  console.log('üìä –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (HP/Adena)...\n');
  
  const enriched = enrichWithEfficiency(mobs);
  const sorted = sortByEfficiency(enriched);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  const report = generateEfficiencyReport(sorted);
  console.log(report);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
  const reportPath = './data/efficiency_report.txt';
  fs.writeFileSync(reportPath, report);
  console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
  saveEfficiencyResults(sorted);

  // –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('\nüîç –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:\n');
  
  const withEfficiency = sorted.filter(m => m.efficiency !== null).slice(0, 3);
  withEfficiency.forEach((mob, idx) => {
    console.log(`${idx + 1}. ${mob.name} (Lv. ${mob.level})`);
    console.log(`   HP: ${mob.hp || 'N/A'} | Adena: ${mob.avgAdena} | Efficiency: ${mob.efficiency?.toFixed(2) || 'N/A'}`);
  });
}

integrateMobData().catch(console.error);