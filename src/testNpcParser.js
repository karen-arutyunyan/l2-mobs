import { parseNpcStats, normalizeStats } from './parseNpcStats.js';
import fs from 'fs';
import path from 'path';

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–Ω—Å—Ç—Ä–∞—Ö
 */
async function testNpcParser() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤\n');

  // –ü—Ä–∏–º–µ—Ä—ã –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å –∏—Ö href –∏–∑ mobs_adena.json
  const testMobs = [
    {
      name: 'Elder Red Keltir',
      npcPath: '20537-elder-red-keltir'
    },
    {
      name: '–û—Ä–∫',
      npcPath: '20130-orc'
    },
    {
      name: '–î—Ä–µ–≤–µ—Å–Ω—ã–π –í–æ–ª–∫ –ö—Ö–∞—à–∏',
      npcPath: '20477-kasha-timber-wolf'
    }
  ];

  const results = [];

  for (let i = 0; i < testMobs.length; i++) {
    const mob = testMobs[i];
    console.log(`\n[${ i + 1}/${testMobs.length}] –ó–∞–≥—Ä—É–∂–∞—é ${mob.name}...`);

    try {
      const stats = await parseNpcStats(mob.npcPath);
      const normalized = normalizeStats(stats.stats);
      
      results.push({
        name: mob.name,
        npcPath: mob.npcPath,
        stats: normalized,
        error: stats.error || null
      });

      console.log(`‚úì –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:`);
      console.log('  HP:', normalized['HP']);
      console.log('  EXP:', normalized['EXP']);
      console.log('  Level:', normalized['Level']);

    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞:`, error.message);
      results.push({
        name: mob.name,
        npcPath: mob.npcPath,
        error: error.message
      });
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < testMobs.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const outputPath = './data/test_npc_stats.json';
  const outputDir = path.dirname(outputPath);
  
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  fs.writeFileSync(outputPath, JSON.stringify(results, null, 2));
  console.log(`\n‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`);

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\nüìä –ò—Ç–æ–≥–∏:');
  console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${results.filter(r => !r.error).length}/${testMobs.length}`);
  
  if (results.some(r => r.error)) {
    console.log('\n‚ö†Ô∏è  –û—à–∏–±–∫–∏:');
    results.filter(r => r.error).forEach(r => {
      console.log(`  - ${r.name}: ${r.error}`);
    });
  }
}

testNpcParser().catch(console.error);