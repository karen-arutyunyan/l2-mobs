import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { parseMobStats, normalizeStats } from './parseMobStats.js';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const DATA_DIR = path.join(__dirname, '../data');

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–Ω—Å—Ç—Ä–∞ —Å –≤–∏–∫–∏
 * @param {number} mobId - ID –º–æ–Ω—Å—Ç—Ä–∞
 * @param {string} language - —è–∑—ã–∫ ('en', 'ru', –∏ —Ç.–¥.)
 * @returns {Promise<string>} HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
async function fetchMobHtml(mobId, language = 'en') {
  const baseUrl = `https://wiki1.mw2.wiki/${language}/npc`;
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    const urls = [
      `${baseUrl}/${mobId}`,
      `${baseUrl}/${mobId}/live`,
      `https://wiki1.mw2.wiki/en/npc/${mobId}/live`,
      `https://wiki1.mw2.wiki/en/npc/${mobId}`
    ];

    for (const url of urls) {
      try {
        const response = await axios.get(url, {
          timeout: 5000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
        
        if (response.status === 200 && response.data) {
          console.log(`  ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${url}`);
          return response.data;
        }
      } catch (err) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É URL
        continue;
      }
    }
    
    throw new Error('–í—Å–µ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  } catch (error) {
    console.log(`  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å (${error.message})`);
    return null;
  }
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω—Å—Ç—Ä–∞
 * @param {string} htmlContent - HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 * @returns {Object} –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function parseMobStatsFromHtml(htmlContent) {
  try {
    const stats = parseMobStats(htmlContent, false);
    if (!stats) return null;
    
    const normalized = normalizeStats(stats);
    return normalized;
  } catch (error) {
    console.log(`  ‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
    return null;
  }
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –º–æ–Ω—Å—Ç—Ä—É
 * @param {Object} mob - –æ–±—ä–µ–∫—Ç –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑ mobs_adena.json
 * @returns {Promise<Object>} –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–æ–Ω—Å—Ç—Ä–∞
 */
async function collectMobData(mob, retries = 2) {
  console.log(`\nüì• –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è: ${mob.name} (ID: ${mob.id})`);
  
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (–±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º –∫ —Å–µ—Ä–≤–µ—Ä—É)
  await new Promise(resolve => setTimeout(resolve, 500));
  
  let html = null;
  let attempt = 0;
  
  while (attempt < retries && !html) {
    try {
      console.log(`  –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${retries}...`);
      html = await fetchMobHtml(mob.id);
      if (html) break;
    } catch (error) {
      attempt++;
      if (attempt < retries) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    attempt++;
  }
  
  if (!html) {
    console.log(`  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`);
    return { ...mob, stats: null, hasData: false };
  }
  
  const stats = parseMobStatsFromHtml(html);
  
  if (!stats || !stats['HP']) {
    console.log(`  ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É HP`);
    return { ...mob, stats: null, hasData: false };
  }
  
  console.log(`  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: HP=${stats['HP']}, EXP=${stats['EXP']}`);
  
  return {
    ...mob,
    stats: stats,
    hasData: true,
    level: stats['Level'],
    hp: stats['HP'],
    mp: stats['MP'],
    exp: stats['EXP'],
    sp: stats['SP'],
    pAtk: stats['P.Atk.'],
    mAtk: stats['M.Atk.'],
    pDef: stats['P.Def.'],
    mDef: stats['M.Def.'],
    accuracy: stats['Accuracy'],
    evasion: stats['Evasion'],
    respawnTime: stats['Respawn Time'],
    defenceAttributes: stats['Defence Attributes'] || {}
  };
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –º–æ–Ω—Å—Ç—Ä–∞–º
 * @param {number} limit - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω—Å—Ç—Ä–æ–≤ (0 = –≤—Å–µ)
 * @param {number} startFrom - —Å –∫–∞–∫–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –Ω–∞—á–∞—Ç—å
 */
async function collectFullDatabase(limit = 0, startFrom = 0) {
  console.log('üóÑÔ∏è  –°–ë–û–†–ö–ê –ü–û–õ–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• –ú–û–ù–°–¢–†–û–í\n');
  console.log('='.repeat(60));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å –¥—Ä–æ–ø–æ–º –∞–¥–µ–Ω—ã
  const adenaMobsPath = path.join(DATA_DIR, 'mobs_adena.json');
  
  if (!fs.existsSync(adenaMobsPath)) {
    console.error('‚ùå –§–∞–π–ª mobs_adena.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.error('   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run parse-adena');
    process.exit(1);
  }
  
  const mobs = JSON.parse(fs.readFileSync(adenaMobsPath, 'utf-8'));
  console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mobs.length} –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–∑ mobs_adena.json\n`);
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  let modsToProcess = mobs.slice(startFrom);
  if (limit > 0 && limit < modsToProcess.length) {
    modsToProcess = modsToProcess.slice(0, limit);
  }
  
  console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${modsToProcess.length} –º–æ–Ω—Å—Ç—Ä–æ–≤...\n`);
  
  const enrichedMobs = [];
  const stats = {
    total: modsToProcess.length,
    successful: 0,
    failed: 0,
    noData: 0,
    startTime: Date.now()
  };
  
  for (let i = 0; i < modsToProcess.length; i++) {
    const mob = modsToProcess[i];
    const progress = `[${i + 1}/${modsToProcess.length}]`;
    
    try {
      const enrichedMob = await collectMobData(mob, 2);
      enrichedMobs.push(enrichedMob);
      
      if (enrichedMob.hasData) {
        stats.successful++;
      } else {
        stats.noData++;
      }
    } catch (error) {
      console.error(`  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${error.message}`);
      enrichedMobs.push({ ...mob, stats: null, hasData: false });
      stats.failed++;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –º–æ–Ω—Å—Ç—Ä–æ–≤
    if ((i + 1) % 10 === 0 || i === modsToProcess.length - 1) {
      const elapsed = ((Date.now() - stats.startTime) / 1000).toFixed(1);
      console.log(`\n‚è±Ô∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${i + 1}/${modsToProcess.length} (${elapsed}s)`);
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.successful}`);
      console.log(`   ‚ö†Ô∏è  –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö: ${stats.noData}`);
      console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${stats.failed}\n`);
    }
  }
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò:\n');
  console.log(`  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.successful + stats.noData + stats.failed}`);
  console.log(`  ‚úÖ –° –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: ${stats.successful}`);
  console.log(`  ‚ö†Ô∏è  –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö: ${stats.noData}`);
  console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${stats.failed}`);
  console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${((Date.now() - stats.startTime) / 1000).toFixed(1)}s`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const resultsPath = path.join(DATA_DIR, 'mobs_with_stats.json');
  fs.writeFileSync(resultsPath, JSON.stringify(enrichedMobs, null, 2));
  console.log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: data/mobs_with_stats.json`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ
  const successfulMobs = enrichedMobs.filter(m => m.hasData);
  const successPath = path.join(DATA_DIR, 'mobs_successful.json');
  fs.writeFileSync(successPath, JSON.stringify(successfulMobs, null, 2));
  console.log(`üíæ –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –≤: data/mobs_successful.json (${successfulMobs.length} –º–æ–Ω—Å—Ç—Ä–æ–≤)`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
  const report = generateReport(enrichedMobs);
  const reportPath = path.join(DATA_DIR, 'collection_report.txt');
  fs.writeFileSync(reportPath, report);
  console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: data/collection_report.txt\n`);
  
  return enrichedMobs;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–µ
 */
function generateReport(mobs) {
  const withStats = mobs.filter(m => m.hasData);
  
  let report = 'üìä –û–¢–ß–ï–¢ –û –°–ë–û–†–ö–ï –ë–î –ú–û–ù–°–¢–†–û–í\n';
  report += '='.repeat(60) + '\n\n';
  
  report += `üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
  report += `  –í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${mobs.length}\n`;
  report += `  –° –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: ${withStats.length}\n`;
  report += `  –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö: ${mobs.length - withStats.length}\n`;
  report += `  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((withStats.length / mobs.length) * 100).toFixed(1)}%\n\n`;
  
  if (withStats.length > 0) {
    // HP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const hps = withStats.map(m => m.hp).sort((a, b) => a - b);
    const exps = withStats.map(m => m.exp).sort((a, b) => a - b);
    
    report += `üí™ HP –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
    report += `  –ú–∏–Ω–∏–º—É–º: ${Math.min(...hps)}\n`;
    report += `  –ú–∞–∫—Å–∏–º—É–º: ${Math.max(...hps)}\n`;
    report += `  –°—Ä–µ–¥–Ω–µ–µ: ${(hps.reduce((a, b) => a + b, 0) / hps.length).toFixed(1)}\n\n`;
    
    report += `‚≠ê EXP –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
    report += `  –ú–∏–Ω–∏–º—É–º: ${Math.min(...exps)}\n`;
    report += `  –ú–∞–∫—Å–∏–º—É–º: ${Math.max(...exps)}\n`;
    report += `  –°—Ä–µ–¥–Ω–µ–µ: ${(exps.reduce((a, b) => a + b, 0) / exps.length).toFixed(1)}\n\n`;
    
    // –¢–û–ü 10 –ø–æ HP/EXP –æ—Ç–Ω–æ—à–µ–Ω–∏—é
    const ratios = withStats
      .map(m => ({ name: m.name, hp: m.hp, exp: m.exp, ratio: m.exp / m.hp }))
      .sort((a, b) => b.ratio - a.ratio);
    
    report += `üî• –¢–û–ü 10 –õ–£–ß–®–ò–• EXP/HP:\n`;
    ratios.slice(0, 10).forEach((m, i) => {
      report += `  ${i + 1}. ${m.name.padEnd(30)} EXP:${m.exp.toString().padStart(5)} HP:${m.hp.toString().padStart(4)} Ratio:${m.ratio.toFixed(2)}\n`;
    });
  }
  
  return report;
}

// –ó–∞–ø—É—Å–∫
const args = process.argv.slice(2);
const limit = args[0] ? parseInt(args[0]) : 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
const startFrom = args[1] ? parseInt(args[1]) : 0;

console.log(`\nüöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –ë–î (limit: ${limit}, start: ${startFrom})\n`);

try {
  await collectFullDatabase(limit, startFrom);
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!\n');
} catch (error) {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
}