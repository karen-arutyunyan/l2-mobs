import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const DATA_DIR = path.join(__dirname, '../data');

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–Ω—Å—Ç—Ä–æ–≤
 */
function analyzeEfficiency() {
  console.log('üìä –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –§–ê–†–ú–ê\n');
  console.log('='.repeat(70));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ë–î —Å –¥–∞–Ω–Ω—ã–º–∏
  const dbPath = path.join(DATA_DIR, 'mobs_with_data.json');
  
  if (!fs.existsSync(dbPath)) {
    console.log('‚ö†Ô∏è  –ë–î –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞!');
    console.log('\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run build-db\n');
    
    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –ë–î
    const fullDbPath = path.join(DATA_DIR, 'mobs_full_database.json');
    if (!fs.existsSync(fullDbPath)) {
      console.error('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: mobs_with_data.json –∏–ª–∏ mobs_full_database.json');
      process.exit(1);
    }
  }
  
  const mobs = JSON.parse(
    fs.readFileSync(dbPath, 'utf-8')
  );
  
  console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mobs.length} –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n`);
  
  if (mobs.length === 0) {
    console.log('‚ö†Ô∏è  –ù–µ—Ç –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏. –î–æ–±–∞–≤—å—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ data/ –ø–∞–ø–∫—É.\n');
    return;
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω—Å—Ç—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  const validMobs = mobs.filter(m => m.hp && m.exp && m.avgAdena);
  
  console.log(`‚úÖ –ú–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${validMobs.length}\n`);
  
  // === –†–ê–°–ß–ï–¢ –ú–ï–¢–†–ò–ö ===
  
  // 1. EXP/HP - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –æ–ø—ã—Ç—É –Ω–∞ HP
  const expPerHp = validMobs.map(m => ({
    ...m,
    metric: m.exp / m.hp,
    name: m.name,
    level: m.allStats?.level || m.level,
    exp: m.exp,
    hp: m.hp
  })).sort((a, b) => b.metric - a.metric);
  
  // 2. EXP/Adena - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –æ–ø—ã—Ç—É –Ω–∞ –∞–¥–µ–Ω—É
  const expPerAdena = validMobs.map(m => ({
    ...m,
    metric: m.exp / m.avgAdena,
    exp: m.exp,
    avgAdena: m.avgAdena
  })).sort((a, b) => b.metric - a.metric);
  
  // 3. SP/HP - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ SP –Ω–∞ HP
  const spPerHp = validMobs
    .filter(m => m.sp)
    .map(m => ({
      ...m,
      metric: (m.sp / m.hp),
      sp: m.sp,
      hp: m.hp
    }))
    .sort((a, b) => b.metric - a.metric);
  
  // 4. Adena/Respawn - —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏ –∞–¥–µ–Ω—ã
  const adenaPerRespawn = validMobs
    .filter(m => m.respawnTime)
    .map(m => ({
      ...m,
      metric: m.avgAdena / (m.respawnTime / 60), // –∞–¥–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç—É
      avgAdena: m.avgAdena,
      respawnTime: m.respawnTime
    }))
    .sort((a, b) => b.metric - a.metric);
  
  // 5. –ö–æ–º–±–æ-–º–µ—Ç—Ä–∏–∫–∞: (EXP * SP + Adena) / HP
  const comboMetric = validMobs.map(m => ({
    ...m,
    metric: ((m.exp * (m.sp || 1)) + m.avgAdena) / m.hp,
    score: ((m.exp * (m.sp || 1)) + m.avgAdena) / m.hp
  })).sort((a, b) => b.metric - a.metric);
  
  // === –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
  
  console.log('üéØ –ú–ï–¢–†–ò–ö–ê 1: EXP/HP (–û–ø—ã—Ç –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∑–¥–æ—Ä–æ–≤—å—è)\n');
  printTop(expPerHp, 'EXP/HP', (m, i) => {
    return `${String(i+1).padStart(2)}. Lv${String(m.level).padStart(2)} ${m.name.padEnd(35)} EXP:${String(m.exp).padStart(5)} HP:${String(m.hp).padStart(4)} Ratio:${m.metric.toFixed(3)}`;
  });
  
  console.log('\nüí∞ –ú–ï–¢–†–ò–ö–ê 2: EXP/Adena (–û–ø—ã—Ç –Ω–∞ –∞–¥–µ–Ω—É)\n');
  printTop(expPerAdena, 'EXP/Adena', (m, i) => {
    return `${String(i+1).padStart(2)}. ${m.name.padEnd(35)} EXP:${String(m.exp).padStart(5)} Adena:${String(m.avgAdena).padStart(4)} Ratio:${m.metric.toFixed(3)}`;
  });
  
  if (spPerHp.length > 0) {
    console.log('\n‚ú® –ú–ï–¢–†–ò–ö–ê 3: SP/HP (–£–º–µ–Ω–∏–µ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∑–¥–æ—Ä–æ–≤—å—è)\n');
    printTop(spPerHp, 'SP/HP', (m, i) => {
      return `${String(i+1).padStart(2)}. ${m.name.padEnd(35)} SP:${String(m.sp).padStart(5)} HP:${String(m.hp).padStart(4)} Ratio:${m.metric.toFixed(3)}`;
    });
  }
  
  if (adenaPerRespawn.length > 0) {
    console.log('\n‚ö° –ú–ï–¢–†–ò–ö–ê 4: Adena/Respawn (–ê–¥–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç—É)\n');
    printTop(adenaPerRespawn, 'Adena/min', (m, i) => {
      const respawnSec = m.respawnTime;
      return `${String(i+1).padStart(2)}. ${m.name.padEnd(35)} Adena:${String(m.avgAdena).padStart(4)} Respawn:${String(respawnSec).padStart(2)}s Ratio:${m.metric.toFixed(2)}/min`;
    });
  }
  
  console.log('\nüî• –ö–û–ú–ë–û-–ú–ï–¢–†–ò–ö–ê: (EXP * SP + Adena) / HP\n');
  console.log('(–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∞—Ä–º–∞)\n');
  printTop(comboMetric, 'Combo', (m, i) => {
    return `${String(i+1).padStart(2)}. ${m.name.padEnd(35)} Score:${m.metric.toFixed(2)}`;
  });
  
  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
  
  console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');
  
  const avgExpPerHp = expPerHp.reduce((sum, m) => sum + m.metric, 0) / expPerHp.length;
  const avgExpPerAdena = expPerAdena.reduce((sum, m) => sum + m.metric, 0) / expPerAdena.length;
  const avgCombo = comboMetric.reduce((sum, m) => sum + m.metric, 0) / comboMetric.length;
  
  console.log(`  EXP/HP:    ${avgExpPerHp.toFixed(3)} (avg)`);
  console.log(`  EXP/Adena: ${avgExpPerAdena.toFixed(3)} (avg)`);
  console.log(`  Combo:     ${avgCombo.toFixed(2)} (avg)`);
  
  // === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
  
  const bestExp = expPerHp[0];
  const bestAdena = expPerAdena[0];
  const bestCombo = comboMetric[0];
  
  console.log(`  ü•á –õ–£–ß–®–ï –í–°–ï–ì–û –î–õ–Ø EXP:   ${bestExp.name} (${bestExp.metric.toFixed(3)} EXP/HP)`);
  console.log(`  üí∞ –õ–£–ß–®–ï –í–°–ï–ì–û –î–õ–Ø ADENA:  ${bestAdena.name} (${bestAdena.metric.toFixed(3)} EXP/Adena)`);
  console.log(`  üî• –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –í–´–ë–û–†:    ${bestCombo.name} (Score: ${bestCombo.metric.toFixed(2)})`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const results = {
    timestamp: new Date().toISOString(),
    totalMobs: validMobs.length,
    metrics: {
      expPerHp: expPerHp.slice(0, 20),
      expPerAdena: expPerAdena.slice(0, 20),
      comboMetric: comboMetric.slice(0, 20)
    },
    statistics: {
      avgExpPerHp: avgExpPerHp.toFixed(3),
      avgExpPerAdena: avgExpPerAdena.toFixed(3),
      avgCombo: avgCombo.toFixed(2)
    },
    recommendations: {
      bestExp: bestExp.name,
      bestAdena: bestAdena.name,
      bestCombo: bestCombo.name
    }
  };
  
  const resultsPath = path.join(DATA_DIR, 'efficiency_analysis.json');
  fs.writeFileSync(resultsPath, JSON.stringify(results, null, 2));
  console.log(`\nüíæ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: data/efficiency_analysis.json`);
  
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!\n');
}

function printTop(data, label, formatter) {
  const top = Math.min(10, data.length);
  
  for (let i = 0; i < top; i++) {
    console.log(`  ${formatter(data[i], i)}`);
  }
  
  if (data.length > 10) {
    console.log(`\n  ... –∏ –µ—â–µ ${data.length - 10} –º–æ–Ω—Å—Ç—Ä–æ–≤`);
  }
}

// –ó–∞–ø—É—Å–∫
try {
  analyzeEfficiency();
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  console.error(error.stack);
  process.exit(1);
}