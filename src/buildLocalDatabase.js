import fs from 'fs';
import path from 'path';
import { parseMobStats, normalizeStats } from './parseMobStats.js';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const DATA_DIR = path.join(__dirname, '../data');

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö HTML —Ñ–∞–π–ª–æ–≤
 */
async function buildLocalDatabase() {
  console.log('üìö –°–ë–û–†–ö–ê –ë–î –ò–ó –õ–û–ö–ê–õ–¨–ù–´–• HTML –§–ê–ô–õ–û–í\n');
  console.log('='.repeat(60));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∞–¥–µ–Ω—ã
  const adenaMobsPath = path.join(DATA_DIR, 'mobs_adena.json');
  if (!fs.existsSync(adenaMobsPath)) {
    console.error('‚ùå –§–∞–π–ª mobs_adena.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.error('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run parse-adena');
    process.exit(1);
  }
  
  const mobs = JSON.parse(fs.readFileSync(adenaMobsPath, 'utf-8'));
  console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mobs.length} –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏–∑ mobs_adena.json\n`);
  
  // –ò—â–µ–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã –≤ data –ø–∞–ø–∫–µ
  const htmlFiles = fs.readdirSync(DATA_DIR).filter(f => f.endsWith('.html'));
  console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}\n`);
  
  if (htmlFiles.length === 0) {
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n');
    console.log('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:\n');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–Ω—Å—Ç—Ä–∞ –Ω–∞ –≤–∏–∫–∏:');
    console.log('   https://wiki1.mw2.wiki/en/npc/20537-elder-red-keltir/live\n');
    console.log('2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ HTML (Ctrl+S):');
    console.log('   - –í—ã–±–µ—Ä–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ HTML —Ñ–∞–π–ª"');
    console.log('   - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –ø–∞–ø–∫—É: data/\n');
    console.log('3. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç: npc_<ID>.html');
    console.log('   –ü—Ä–∏–º–µ—Ä: npc_20537.html (–¥–ª—è Elder Red Keltir)\n');
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞\n');
    return;
  }
  
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:\n');
  
  const enrichedMobs = JSON.parse(JSON.stringify(mobs)); // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
  const stats = {
    totalFiles: htmlFiles.length,
    processed: 0,
    successful: 0,
    failed: 0
  };
  
  // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π HTML —Ñ–∞–π–ª
  htmlFiles.forEach((fileName, idx) => {
    const filePath = path.join(DATA_DIR, fileName);
    console.log(`  ${idx + 1}/${htmlFiles.length} ${fileName}`);
    
    try {
      const htmlContent = fs.readFileSync(filePath, 'utf-8');
      const rawStats = parseMobStats(htmlContent, false);
      
      if (!rawStats || !rawStats['HP']) {
        console.log(`    ‚ö†Ô∏è  –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É HP`);
        stats.failed++;
        return;
      }
      
      const normalized = normalizeStats(rawStats);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑ HTML
      let mobId = null;
      const nameMatch = fileName.match(/npc_(\d+)/);
      if (nameMatch) {
        mobId = parseInt(nameMatch[1]);
      }
      
      // –ò—â–µ–º –º–æ–Ω—Å—Ç—Ä–∞ –≤ –º–∞—Å—Å–∏–≤–µ
      const mobIndex = enrichedMobs.findIndex(m => m.id === mobId);
      
      if (mobIndex !== -1) {
        // –û–±–æ–≥–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
        enrichedMobs[mobIndex] = {
          ...enrichedMobs[mobIndex],
          hasData: true,
          hp: normalized.hp,
          mp: normalized.mp,
          exp: normalized.exp,
          sp: normalized.sp,
          pAtk: normalized.pAtk,
          mAtk: normalized.mAtk,
          pDef: normalized.pDef,
          mDef: normalized.mDef,
          accuracy: normalized.accuracy,
          evasion: normalized.evasion,
          level: normalized.level,
          respawnTime: normalized.respawnTime,
          defenceAttributes: normalized.defenceAttributes || {},
          allStats: normalized
        };
        
        console.log(`    ‚úÖ ID ${mobId} (${enrichedMobs[mobIndex].name}): HP=${normalized.hp}, EXP=${normalized.exp}`);
        stats.successful++;
      } else {
        console.log(`    ‚ö†Ô∏è  ID ${mobId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–µ–Ω—ã`);
      }
      
      stats.processed++;
    } catch (error) {
      console.log(`    ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      stats.failed++;
    }
  });
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò:\n');
  
  const withData = enrichedMobs.filter(m => m.hasData);
  
  console.log(`  –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processed}`);
  console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.successful}`);
  console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${stats.failed}`);
  console.log(`\n  –ú–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –±–∞–∑–µ: ${enrichedMobs.length}`);
  console.log(`  –° –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: ${withData.length}`);
  console.log(`  –ü–æ–∫—Ä—ã—Ç–∏–µ: ${((withData.length / enrichedMobs.length) * 100).toFixed(1)}%`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const fullPath = path.join(DATA_DIR, 'mobs_full_database.json');
  fs.writeFileSync(fullPath, JSON.stringify(enrichedMobs, null, 2));
  console.log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: data/mobs_full_database.json`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏
  const withDataPath = path.join(DATA_DIR, 'mobs_with_data.json');
  fs.writeFileSync(withDataPath, JSON.stringify(withData, null, 2));
  console.log(`üíæ –¢–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏: data/mobs_with_data.json (${withData.length})`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  const report = generateReport(enrichedMobs, withData);
  const reportPath = path.join(DATA_DIR, 'database_report.txt');
  fs.writeFileSync(reportPath, report);
  console.log(`üìÑ –û—Ç—á–µ—Ç: data/database_report.txt`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ HP –∏ EXP
  if (withData.length > 0) {
    generateStats(withData);
  }
  
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!\n');
  
  return enrichedMobs;
}

function generateReport(allMobs, withData) {
  let report = 'üìö –û–¢–ß–ï–¢ –û –ë–î –ú–û–ù–°–¢–†–û–í\n';
  report += '='.repeat(60) + '\n\n';
  
  report += `üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
  report += `  –í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${allMobs.length}\n`;
  report += `  –° –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π: ${withData.length}\n`;
  report += `  –ë–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${allMobs.length - withData.length}\n`;
  report += `  –ü–æ–∫—Ä—ã—Ç–∏–µ: ${((withData.length / allMobs.length) * 100).toFixed(1)}%\n\n`;
  
  if (withData.length > 0) {
    const hps = withData.map(m => m.hp).filter(h => h).sort((a, b) => a - b);
    const exps = withData.map(m => m.exp).filter(e => e).sort((a, b) => a - b);
    
    if (hps.length > 0) {
      report += `üí™ HP:\n`;
      report += `  –ú–∏–Ω–∏–º—É–º: ${Math.min(...hps)}\n`;
      report += `  –ú–∞–∫—Å–∏–º—É–º: ${Math.max(...hps)}\n`;
      report += `  –°—Ä–µ–¥–Ω–µ–µ: ${(hps.reduce((a, b) => a + b, 0) / hps.length).toFixed(1)}\n\n`;
    }
    
    if (exps.length > 0) {
      report += `‚≠ê EXP:\n`;
      report += `  –ú–∏–Ω–∏–º—É–º: ${Math.min(...exps)}\n`;
      report += `  –ú–∞–∫—Å–∏–º—É–º: ${Math.max(...exps)}\n`;
      report += `  –°—Ä–µ–¥–Ω–µ–µ: ${(exps.reduce((a, b) => a + b, 0) / exps.length).toFixed(1)}\n\n`;
    }
    
    // –¢–û–ü 10 –ø–æ EXP/HP
    const ePerHp = withData
      .filter(m => m.exp && m.hp)
      .map(m => ({
        name: m.name,
        exp: m.exp,
        hp: m.hp,
        level: m.allStats?.Level || '?',
        ratio: m.exp / m.hp
      }))
      .sort((a, b) => b.ratio - a.ratio);
    
    if (ePerHp.length > 0) {
      report += `üî• –¢–û–ü 10 –ü–û EXP/HP (–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨):\n`;
      ePerHp.slice(0, 10).forEach((m, i) => {
        report += `  ${String(i + 1).padStart(2)}. Lv${String(m.level).padStart(2)} ${m.name.padEnd(30)} `;
        report += `EXP:${String(m.exp).padStart(5)} HP:${String(m.hp).padStart(4)} E/H:${m.ratio.toFixed(2)}\n`;
      });
    }
  }
  
  return report;
}

function generateStats(withData) {
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:');
  
  const hps = withData.map(m => m.hp).filter(h => h).sort((a, b) => a - b);
  const exps = withData.map(m => m.exp).filter(e => e).sort((a, b) => a - b);
  
  if (hps.length > 0) {
    console.log(`\n  HP: ${Math.min(...hps)} - ${Math.max(...hps)} (avg: ${(hps.reduce((a, b) => a + b, 0) / hps.length).toFixed(0)})`);
  }
  
  if (exps.length > 0) {
    console.log(`  EXP: ${Math.min(...exps)} - ${Math.max(...exps)} (avg: ${(exps.reduce((a, b) => a + b, 0) / exps.length).toFixed(0)})`);
  }
  
  // –õ—É—á—à–∏–µ –¥–ª—è —Ñ–∞—Ä–º–∞
  const ePerHp = withData
    .filter(m => m.exp && m.hp)
    .map(m => ({
      name: m.name,
      exp: m.exp,
      hp: m.hp,
      ratio: m.exp / m.hp
    }))
    .sort((a, b) => b.ratio - a.ratio);
  
  if (ePerHp.length > 3) {
    console.log(`\n  ü•á –¢–û–ü 3 –î–õ–Ø –§–ê–†–ú–ê (EXP/HP):`);
    ePerHp.slice(0, 3).forEach((m, i) => {
      console.log(`     ${i + 1}. ${m.name}: ${m.ratio.toFixed(2)}`);
    });
  }
}

// –ó–∞–ø—É—Å–∫
console.log('\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...\n');

try {
  await buildLocalDatabase();
} catch (error) {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  console.error(error.stack);
  process.exit(1);
}