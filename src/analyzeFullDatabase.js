import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const DATA_DIR = path.join(__dirname, '../data');

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤
 */
async function analyzeFull() {
  console.log('üìä –ê–ù–ê–õ–ò–ó –ü–û–õ–ù–û–ì–û –°–ü–ò–°–ö–ê –ú–û–ù–°–¢–†–û–í\n');
  console.log('='.repeat(70) + '\n');
  
  try {
    const dataPath = path.join(DATA_DIR, 'mobs_adena.json');
    const rawData = fs.readFileSync(dataPath, 'utf-8');
    const mobs = JSON.parse(rawData);
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${mobs.length}\n`);
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    const byLevel = {};
    mobs.forEach(mob => {
      const levelMatch = mob.level.match(/(\d+)/);
      const level = levelMatch ? parseInt(levelMatch[1]) : 0;
      
      if (!byLevel[level]) {
        byLevel[level] = [];
      }
      byLevel[level].push(mob);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    console.log('üìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –£–†–û–í–ù–Ø–ú:\n');
    
    const levelStats = Object.entries(byLevel)
      .map(([level, mobs]) => ({
        level: parseInt(level),
        count: mobs.length,
        avgAdena: Math.round(
          mobs.reduce((sum, m) => sum + m.avgAdena, 0) / mobs.length
        ),
        maxAdena: Math.max(...mobs.map(m => m.avgAdena)),
        minAdena: Math.min(...mobs.map(m => m.avgAdena))
      }))
      .sort((a, b) => a.level - b.level);
    
    // –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    console.log('–£—Ä–æ–≤–µ–Ω—å | –ö–æ–ª-–≤–æ | –°—Ä–µ–¥. –ê–¥–µ–Ω–∞ | –ú–∞–∫—Å –ê–¥–µ–Ω–∞ | –ú–∏–Ω –ê–¥–µ–Ω–∞');
    console.log('-'.repeat(65));
    
    levelStats.forEach(stat => {
      const level = String(stat.level).padStart(2);
      const count = String(stat.count).padStart(3);
      const avg = String(stat.avgAdena).padStart(11);
      const max = String(stat.maxAdena).padStart(10);
      const min = String(stat.minAdena).padStart(9);
      console.log(`   ${level}   ‚îÇ ${count}  ‚îÇ${avg} ‚îÇ${max} ‚îÇ${min}`);
    });
    
    console.log('\n');
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —É—Ä–æ–≤–Ω–µ–π
    console.log('üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –î–ò–ê–ü–ê–ó–û–ù–ê–ú:\n');
    
    const ranges = [
      { name: '–ù–æ–≤–∏—á–∫–∏ (1-5)', min: 1, max: 5 },
      { name: '–ù–∞—á–∞–ª—å–Ω—ã–µ (6-15)', min: 6, max: 15 },
      { name: '–°—Ä–µ–¥–Ω–∏–µ (16-30)', min: 16, max: 30 },
      { name: '–°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∏–µ (31-50)', min: 31, max: 50 },
      { name: '–í—ã—Å–æ–∫–∏–µ (51-70)', min: 51, max: 70 },
      { name: '–≠–ø–∏–∫/–ë–æ—Å—Å—ã (71-85)', min: 71, max: 85 }
    ];
    
    ranges.forEach(range => {
      const rangeMobs = mobs.filter(m => {
        const level = parseInt(m.level.match(/(\d+)/)[1]);
        return level >= range.min && level <= range.max;
      });
      
      if (rangeMobs.length > 0) {
        const avgAdena = Math.round(
          rangeMobs.reduce((sum, m) => sum + m.avgAdena, 0) / rangeMobs.length
        );
        const bar = '‚ñà'.repeat(Math.min(40, Math.floor(rangeMobs.length / 5)));
        console.log(
          `${range.name.padEnd(25)} ‚îÇ ${String(rangeMobs.length).padStart(4)} –º–æ–Ω. ‚îÇ ${bar}`
        );
      }
    });
    
    console.log('\n');
    
    // –¢–æ–ø 20 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö
    console.log('üí∞ –¢–û–ü 20 –°–ê–ú–´–• –î–û–†–û–ì–ò–• –ú–û–ù–°–¢–†–û–í:\n');
    
    const sorted = [...mobs].sort((a, b) => b.avgAdena - a.avgAdena);
    sorted.slice(0, 20).forEach((mob, i) => {
      const level = mob.level.match(/(\d+)/)[1];
      console.log(
        `${String(i + 1).padStart(2)}. ${mob.name.padEnd(30)} Lv.${level.padStart(2)} ‚Üí ${String(mob.avgAdena).padStart(12)} –∞–¥–µ–Ω—ã`
      );
    });
    
    console.log('\n');
    
    // –¢–æ–ø 20 —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö
    console.log('üí∏ –¢–û–ü 20 –°–ê–ú–´–• –î–ï–®–Å–í–´–• –ú–û–ù–°–¢–†–û–í:\n');
    
    sorted.slice(-20).reverse().forEach((mob, i) => {
      const level = mob.level.match(/(\d+)/)[1];
      console.log(
        `${String(i + 1).padStart(2)}. ${mob.name.padEnd(30)} Lv.${level.padStart(2)} ‚Üí ${String(mob.avgAdena).padStart(12)} –∞–¥–µ–Ω—ã`
      );
    });
    
    console.log('\n');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìã –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');
    
    const totalAdena = mobs.reduce((sum, m) => sum + m.avgAdena, 0);
    const avgAdena = Math.round(totalAdena / mobs.length);
    const uniqueIds = new Set(mobs.map(m => m.id)).size;
    
    console.log(`–í—Å–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ:     ${mobs.length}`);
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID:               ${uniqueIds}`);
    console.log(`–°—Ä–µ–¥–Ω—è—è –∞–¥–µ–Ω–∞ –∑–∞ –º–æ–Ω—Å—Ç—Ä–∞:   ${avgAdena}`);
    console.log(`–í—Å–µ–≥–æ –∞–¥–µ–Ω—ã (–µ—Å–ª–∏ —É–±–∏—Ç—å –≤—Å–µ—Ö): ${totalAdena.toLocaleString('ru-RU')}`);
    console.log(`–£—Ä–æ–≤–Ω–∏ –≤ –∏–≥—Ä–µ:               1 - 85`);
    
    // –ù–∞—Ö–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    const uniqueLevels = new Set(
      mobs.map(m => {
        const match = m.level.match(/(\d+)/);
        return match ? parseInt(match[1]) : 0;
      })
    );
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤: ${uniqueLevels.size}`);
    
    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥—Ä–æ–ø–∞
    console.log('\nüé≤ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –î–†–û–ü–ê:\n');
    
    const byChance = {};
    mobs.forEach(mob => {
      if (!byChance[mob.chance]) {
        byChance[mob.chance] = 0;
      }
      byChance[mob.chance]++;
    });
    
    Object.entries(byChance)
      .sort((a, b) => parseInt(b[0]) - parseInt(a[0]))
      .forEach(([chance, count]) => {
        const percent = (count / mobs.length * 100).toFixed(1);
        console.log(`${chance}% —à–∞–Ω—Å: ${count} –º–æ–Ω—Å—Ç—Ä–æ–≤ (${percent}%)`);
      });
    
    console.log('\n' + '='.repeat(70));
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    const analysisResult = {
      timestamp: new Date().toISOString(),
      totalMobs: mobs.length,
      uniqueIds: uniqueIds,
      avgAdena: avgAdena,
      totalAdena: totalAdena,
      levelStats: levelStats,
      rangeStats: ranges.map(range => {
        const rangeMobs = mobs.filter(m => {
          const level = parseInt(m.level.match(/(\d+)/)[1]);
          return level >= range.min && level <= range.max;
        });
        return {
          range: range.name,
          count: rangeMobs.length,
          avgAdena: rangeMobs.length > 0
            ? Math.round(rangeMobs.reduce((sum, m) => sum + m.avgAdena, 0) / rangeMobs.length)
            : 0
        };
      }),
      topMobs: sorted.slice(0, 20),
      bottomMobs: sorted.slice(-20).reverse()
    };
    
    const reportPath = path.join(DATA_DIR, 'full_analysis_report.json');
    fs.writeFileSync(reportPath, JSON.stringify(analysisResult, null, 2));
    console.log(`üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: data/full_analysis_report.json`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

analyzeFull().catch(console.error);